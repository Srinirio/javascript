-----------------------JAVASCRIPT----------------
console.log is used for debugging
alert();

----------------VARIABLES--------
DYNAMIC TYPE LANGUAGE

EX:

let a =10;
a="aa";

--variable declaration 
 let ---latest 
 const -----is fixed value can not change
 var -------old version

TO connect html and js

<script scr="script.js"></script>

----------operators--------

arithmatic op: + - * / % ++ -- (** to find square  a=10; a**2 = 100)
assignment op: = = += -= /= %=
comparisin op: == === != > < >= <= ?
logical op: && || !

typeof 'a';
string

-----DIFFERENT BETWEEN = AND == ----

Double == is check the value
Ex
 let a=10;
 a='10';
 a==10 ; //true

 a===10; // false here === is check the data type als0

-------------USER INPUT------------

let name= prompt("Enter your name:"); if you use this you get string value only.
 so use Number(name);

--------------------DOM--------------

<div id="wrapper">
        <h2>cm to inches</h2>
        <div class="inputdiv">
            <input type="text" id="input" placeholder="length in cm">
        </div>
        <div>
            <button type="submit" onclick="convert()">Convert to inches</button>
        </div>
        <div id="result">

        </div>
    </div>

    <script>
        function convert(){
            let input = Number(document.getElementById("input").value);
        let inches = input/2.54;
        let btn = document.getElementById("result");
        btn.innerHTML = inches.tofixed(3);
        }
    </script>



----------------------MATH Functions-------------

 Math.round(); 5.8-6
 Math.floor(); 5 ingore 2nd num
 Math.ceil(); 6 next num
 Math.sqrt(55);
 MAth.abs(-9) - to +
 Math.pow(3,5) ;
 Math.min();

-------------STRING------------

let str = "hello world";
let str1 = "javascript"

str.concat(str1);
str.slice(1,2)- 1-st position 2- end posision--(e)
str.slice(-5) in reverse order
srt.substring(1,2) (e)
str.substr(1,2); el
str.replace("e","0"); h0llo
str.replaceAll();
str.toUpperCase();
str.length
str.trim()
str.padEnd(10,'0');
'hello00000'
str.padStart(10,'0');
'00000hello'
str.indexOf('h')
0
str.lastIndexOf('h')
0
str.search('hello')
11
str.includes('h')
true
str.includes('hikm')
false
str.charAt();

-------------Math.floor(Math.random(name.length)*name.length)---TO FIND RANDOM CHAR AT STRING--

-----------TEMPLATE LITERALS---------

let mes = `${name} ${class} is here`

let a = 5;
undefined
let b = 95;
undefined
let mes =`"you have ${a} items in your cart."`
undefined
mes =`"you have ${a} items in your cart."`
'"you have 5 items in your cart."'
mes =`"you have ${a} items in your cart."\n your bill amount is $${b}`
'"you have 5 items in your cart."\n your bill amount is $95'

----------------------ARRAYS------------

let array = [1,2,3,4,5,6];

ADD

array.push(8);
array.pop();

array.shift()--remove 1st element

array.unshift(10)--add element in 1st position
array=[1,2,3,4,5]
array.splice(2,1)---it delete the 3-[1,2,4,5]

array.reverse();

/////////array to string

let a = array.join();

////////string to array

let s= a,s,d;
let a = s.split(",");
a=[a,s,d]
-----------------------
------------------event-listener------------
</head>
<body>
    <div id="wrapper">
        <h2>cm to inches</h2>
        <div class="inputdiv">
            <select name="country" id="input">
                <option value="Bangalore">Bangalore</option>
                <option value="Chennai">Chennai</option>
                <option value="Delhi">Delhi</option>
                <option value="mumbai">mumbai</option>
            </select>
        </div>
        <div>
            <button type="submit">Convert to inches</button>
        </div>
        <div id="result">

        </div>
    </div>

    <script>
       let btn=document.querySelector('button');
//////////////here the event
       btn.addEventListener('click',show);
       function show(){
        let ele = document.getElementById('input');
        const option = ele.options[ele.selectedIndex].value;
        let pos =0, le=0 , lan="";
        switch(option){
            case 'Bangalore':
                pos=1;
                le:1;
                lan="tamil";
                break

                case 'Chennai':
                pos=2;
                le:2;
                lan="tamil";
                break

                case 'mumbai':
                pos=3;
                le:3;
                lan="tamil";
                break
        }
        
        let spe_div = document.createElement('div');
        spe_div.id = 'result';
        document.getElementById("wrapper").appendChild(spe_div);
        document.getElementById('result').innerHTML = `${option}`;
       }

    </script>

----------------------
<body>
    <div class="dropDown">
        <input type="text" id="element" placeholder="Enter the dept"><br>

        <div id="btn">
            <button>Add</button>
        </div>
        <select name="dept" id="dept">
            <option value="cse">cse</option>
            <option value="ece">ece</option>
        </select>
    </div>


     <script>
        let button = document.querySelector('button');
        button.addEventListener('click', show);

        function show() {
            let input = document.getElementById("element").value;
            let ele = document.createElement('option');
            ele.id='dept';
            document.getElementById('dept').appendChild(ele);
            ele.innerHTML = input; 
        }
    </script>
---------------------

--------------------

<body>
     <div class="heading">
        <h2>Color flip</h2>
        <div numOfCol>
            <h2 id="color">#FFFFF</h2>
        </div>
     </div>

     <div class="btn" id="btn">
        <button>Change Color</button>
     </div>

    <script src="script.js"></script>
</body>



let btn = document.querySelector('button');
let color = document.getElementById('color');
let back = document.getElementById('btn');
let hex = [0,1,2,3,4,5,6,7,8,9,'A','B','C','D','E','F'];

btn.addEventListener('click',changeColor);

function changeColor(){
    let col = "#";
   
    for(let i=1;i<=6;i++){
        
        col = col+getValu();
    }
    console.log(col)

    color.innerHTML = col;
    back.style.backgroundColor=col;
}

function getValu(){
    let num =Math.floor(Math.random()*16);
    
    return hex[num];
}
-------------------

---------------------OBJECT-----------

ways to create object
1} let item = { 
name = "phone";
price= 2070;
model="k20";
}

2} let item2= new Object();
item2.name="remi";
item2.price=200;
item2.model= "note pro";

----------------HOISTING-------FUNCTIONS-----

sayHello(); // "Hello, World!"

function sayHello() {
    console.log("Hello, World!");
}
The entire function declaration is hoisted to the top, so you can call the function even before its declaration in the code.


--REST PARAMENTERS--
LET SUM = FUNCTION(...ARGS){
  
}
---------------Hoisting-----------
hoisting is a JavaScript behavior where declarations (but not initializations) of variables and 
entire function bodies are moved to the top of their containing scope during the compilation phase.

------------------Modules------------
JavaScript modules allow you to break up your code into separate files.

This makes it easier to maintain a code-base.

Modules are imported from external files with the import statement.

Modules also rely on type="module" in the <script> tag.

-------------CALLBACKS--------------
In JavaScript, a callback is a function that is passed as an argument to another 
function and is intended to be executed after the completion of 
some asynchronous operation or at a later time. Callbacks are a fundamental concept in asynchronous 
programming and are commonly used to handle tasks such as responding to user actions, making 
network requests, or reading files.

---------------------PROMISES----------------


PROMISES IS AN OBJECT IN JS MOSTLY IT IS USED FOR ASYNCHRONOUS OPRATIONS

A Promise can be in one of three states:

Pending: The initial state; the promise is neither fulfilled nor rejected.

Fulfilled: The operation completed successfully, and the promise has a resulting value.

Rejected: The operation failed, and the promise has a reason for the failure.

Here's a basic example of using a Promise:

const myPromise = new Promise((resolve, reject) => {
  // Simulating an asynchronous operation
  setTimeout(() => {
    const success = true;

    if (success) {
      resolve("Operation succeeded!");
    } else {
      reject("Operation failed!");
    }
  }, 2000); // Simulating a delay of 2 seconds
});

// Using the promise
myPromise
  .then((result) => {
    console.log(result); // Output: Operation succeeded!
  })
  .catch((error) => {
    console.error(error); // Output: Operation failed!
  });


------------------------ASYNC/AWAIT--------------
"async and await make promises easier to write"

async makes a function return a Promise

await makes a function wait for a Promise

------------------











 